def makeJdkRunner name scoreMultiplier jdkHomeDir runner =
  def score plan =
    def regex = `jdk/[^/]+`
    match plan.getPlanResources
      resource, Nil if matches regex resource =
        plan
        | editPlanResources (filter (! matches regex _))
        | runner.getRunnerScore
        | rmap (_ *. scoreMultiplier)
      _ = Fail "{name}: cannot supply resources: {catWith " " plan.getPlanResources}"

  def pre runnerInput =
    def addEnv env =
      env
      | editEnvValue "PATH" ("{jdkHomeDir}/bin:{_}")
      | (_ ++ ("JAVA_HOME={jdkHomeDir}", Nil))
    runnerInput
    | rmap addEnv.editRunnerInputEnvironment
    | (Pair _ Unit)

  def post (Pair runnerOutput Unit) = runnerOutput

  makeRunner name score pre post runner

publish runner =
  makeJdkRunner "/opt/jdk8-local"   2.0 "/opt/jdk1.8.0_212" localRunner,
  makeJdkRunner "/opt/jdk8-default" 2.0 "/opt/jdk1.8.0_212" defaultRunner,
  makeJdkRunner "/opt/jdk11-local"   3.0 "/opt/jdk-11.0.3" localRunner,
  makeJdkRunner "/opt/jdk11-default" 3.0 "/opt/jdk-11.0.3" defaultRunner,
  Nil


global def makePathRunner name scoreMultiplier path runner =
  def score plan =
    plan
    | setPlanResources Nil
    | runner.getRunnerScore
    | rmap (_ *. scoreMultiplier)

  def pre runnerInput =
    runnerInput
    | rmap (editEnvValue "PATH" ("{path}:{_}")).editRunnerInputEnvironment
    | (Pair _ Unit)

  def post (Pair runnerOutput Unit) = runnerOutput

  makeRunner name score pre post runner

publish runner =
  makePathRunner "/opt/jdk-local"   1.5 "/opt/jdk/bin" localRunner,
  makePathRunner "/opt/jdk-default" 1.5 "/opt/jdk/bin" defaultRunner,
  Nil

##publish path = "/opt/jdk/bin", Nil

global def runJavaVersion =
  def cmdline = "java", "-version", Nil
  makePlan cmdline Nil
  | setPlanKeep False
  | setPlanResources ("jdk/1.8.0", Nil)
  | runJob
